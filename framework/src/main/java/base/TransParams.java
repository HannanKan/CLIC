/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package base;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-24")
public class TransParams implements org.apache.thrift.TBase<TransParams, TransParams._Fields>, java.io.Serializable, Cloneable, Comparable<TransParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransParams");

  private static final org.apache.thrift.protocol.TField TRANS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("transType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OTHERS_FIELD_DESC = new org.apache.thrift.protocol.TField("others", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TransParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TransParamsTupleSchemeFactory();

  /**
   * 
   * @see TransType
   */
  public @org.apache.thrift.annotation.Nullable TransType transType; // required
  public @org.apache.thrift.annotation.Nullable String location; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<String, String> others; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TransType
     */
    TRANS_TYPE((short)1, "transType"),
    LOCATION((short)2, "location"),
    OTHERS((short)3, "others");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRANS_TYPE
          return TRANS_TYPE;
        case 2: // LOCATION
          return LOCATION;
        case 3: // OTHERS
          return OTHERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.OTHERS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRANS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("transType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TransType.class)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OTHERS, new org.apache.thrift.meta_data.FieldMetaData("others", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransParams.class, metaDataMap);
  }

  public TransParams() {
  }

  public TransParams(
    TransType transType,
    String location)
  {
    this();
    this.transType = transType;
    this.location = location;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransParams(TransParams other) {
    if (other.isSetTransType()) {
      this.transType = other.transType;
    }
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    if (other.isSetOthers()) {
      java.util.Map<String, String> __this__others = new java.util.HashMap<String, String>(other.others);
      this.others = __this__others;
    }
  }

  public TransParams deepCopy() {
    return new TransParams(this);
  }

  @Override
  public void clear() {
    this.transType = null;
    this.location = null;
    this.others = null;
  }

  /**
   * 
   * @see TransType
   */
  @org.apache.thrift.annotation.Nullable
  public TransType getTransType() {
    return this.transType;
  }

  /**
   * 
   * @see TransType
   */
  public TransParams setTransType(@org.apache.thrift.annotation.Nullable TransType transType) {
    this.transType = transType;
    return this;
  }

  public void unsetTransType() {
    this.transType = null;
  }

  /** Returns true if field transType is set (has been assigned a value) and false otherwise */
  public boolean isSetTransType() {
    return this.transType != null;
  }

  public void setTransTypeIsSet(boolean value) {
    if (!value) {
      this.transType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getLocation() {
    return this.location;
  }

  public TransParams setLocation(@org.apache.thrift.annotation.Nullable String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public int getOthersSize() {
    return (this.others == null) ? 0 : this.others.size();
  }

  public void putToOthers(String key, String val) {
    if (this.others == null) {
      this.others = new java.util.HashMap<String, String>();
    }
    this.others.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<String, String> getOthers() {
    return this.others;
  }

  public TransParams setOthers(@org.apache.thrift.annotation.Nullable java.util.Map<String, String> others) {
    this.others = others;
    return this;
  }

  public void unsetOthers() {
    this.others = null;
  }

  /** Returns true if field others is set (has been assigned a value) and false otherwise */
  public boolean isSetOthers() {
    return this.others != null;
  }

  public void setOthersIsSet(boolean value) {
    if (!value) {
      this.others = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case TRANS_TYPE:
      if (value == null) {
        unsetTransType();
      } else {
        setTransType((TransType)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    case OTHERS:
      if (value == null) {
        unsetOthers();
      } else {
        setOthers((java.util.Map<String, String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRANS_TYPE:
      return getTransType();

    case LOCATION:
      return getLocation();

    case OTHERS:
      return getOthers();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRANS_TYPE:
      return isSetTransType();
    case LOCATION:
      return isSetLocation();
    case OTHERS:
      return isSetOthers();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransParams)
      return this.equals((TransParams)that);
    return false;
  }

  public boolean equals(TransParams that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_transType = true && this.isSetTransType();
    boolean that_present_transType = true && that.isSetTransType();
    if (this_present_transType || that_present_transType) {
      if (!(this_present_transType && that_present_transType))
        return false;
      if (!this.transType.equals(that.transType))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_others = true && this.isSetOthers();
    boolean that_present_others = true && that.isSetOthers();
    if (this_present_others || that_present_others) {
      if (!(this_present_others && that_present_others))
        return false;
      if (!this.others.equals(that.others))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTransType()) ? 131071 : 524287);
    if (isSetTransType())
      hashCode = hashCode * 8191 + transType.getValue();

    hashCode = hashCode * 8191 + ((isSetLocation()) ? 131071 : 524287);
    if (isSetLocation())
      hashCode = hashCode * 8191 + location.hashCode();

    hashCode = hashCode * 8191 + ((isSetOthers()) ? 131071 : 524287);
    if (isSetOthers())
      hashCode = hashCode * 8191 + others.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TransParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTransType()).compareTo(other.isSetTransType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transType, other.transType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOthers()).compareTo(other.isSetOthers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOthers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.others, other.others);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransParams(");
    boolean first = true;

    sb.append("transType:");
    if (this.transType == null) {
      sb.append("null");
    } else {
      sb.append(this.transType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("location:");
    if (this.location == null) {
      sb.append("null");
    } else {
      sb.append(this.location);
    }
    first = false;
    if (isSetOthers()) {
      if (!first) sb.append(", ");
      sb.append("others:");
      if (this.others == null) {
        sb.append("null");
      } else {
        sb.append(this.others);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TransParamsStandardScheme getScheme() {
      return new TransParamsStandardScheme();
    }
  }

  private static class TransParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TransParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRANS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.transType = TransType.findByValue(iprot.readI32());
              struct.setTransTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OTHERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.others = new java.util.HashMap<String, String>(2*_map0.size);
                @org.apache.thrift.annotation.Nullable String _key1;
                @org.apache.thrift.annotation.Nullable String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.others.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setOthersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.transType != null) {
        oprot.writeFieldBegin(TRANS_TYPE_FIELD_DESC);
        oprot.writeI32(struct.transType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.location != null) {
        oprot.writeFieldBegin(LOCATION_FIELD_DESC);
        oprot.writeString(struct.location);
        oprot.writeFieldEnd();
      }
      if (struct.others != null) {
        if (struct.isSetOthers()) {
          oprot.writeFieldBegin(OTHERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.others.size()));
            for (java.util.Map.Entry<String, String> _iter4 : struct.others.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TransParamsTupleScheme getScheme() {
      return new TransParamsTupleScheme();
    }
  }

  private static class TransParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TransParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTransType()) {
        optionals.set(0);
      }
      if (struct.isSetLocation()) {
        optionals.set(1);
      }
      if (struct.isSetOthers()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTransType()) {
        oprot.writeI32(struct.transType.getValue());
      }
      if (struct.isSetLocation()) {
        oprot.writeString(struct.location);
      }
      if (struct.isSetOthers()) {
        {
          oprot.writeI32(struct.others.size());
          for (java.util.Map.Entry<String, String> _iter5 : struct.others.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.transType = TransType.findByValue(iprot.readI32());
        struct.setTransTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.location = iprot.readString();
        struct.setLocationIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.others = new java.util.HashMap<String, String>(2*_map6.size);
          @org.apache.thrift.annotation.Nullable String _key7;
          @org.apache.thrift.annotation.Nullable String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.others.put(_key7, _val8);
          }
        }
        struct.setOthersIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

